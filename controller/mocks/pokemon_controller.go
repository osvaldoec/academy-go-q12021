// Code generated by MockGen. DO NOT EDIT.
// Source: controller/pokemon_controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "pokemon/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockUseCase) GetByID(pokemonID string) (*entity.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", pokemonID)
	ret0, _ := ret[0].(*entity.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUseCaseMockRecorder) GetByID(pokemonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUseCase)(nil).GetByID), pokemonID)
}

// InsertByID mocks base method.
func (m *MockUseCase) InsertByID(pokemonID string) (*entity.Pokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertByID", pokemonID)
	ret0, _ := ret[0].(*entity.Pokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertByID indicates an expected call of InsertByID.
func (mr *MockUseCaseMockRecorder) InsertByID(pokemonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertByID", reflect.TypeOf((*MockUseCase)(nil).InsertByID), pokemonID)
}
